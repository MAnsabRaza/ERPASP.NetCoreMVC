@model ERP.Models.PurchaseViewModel
@using System.Text.Json
@{
    ViewData["Title"] = "Purchase Voucher";
    //int totalItems = ViewBag.TotalItems;
    //int page = ViewBag.Page;
    //int pageSize = ViewBag.PageSize;
    var stockList = ViewBag.StockList as List<ERP.Models.StockMaster>;
    //int totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
}
<div class="space-y-8">
    <div class="border-b border-gray-300 bg-white shadow-sm rounded-xl p-2">
        <nav class="flex space-x-6" aria-label="Tabs">
            <button id="tab-form"
                    class="px-4 py-2 text-sm font-semibold text-blue-900 border-b-2 border-blue-900"
                    type="button">
                <i class="fa-solid fa-plus-circle mr-2"></i> Purchase Voucher Entry
            </button>
            <button id="tab-list"
                    class="px-4 py-2 text-sm font-semibold text-gray-500 hover:text-blue-900"
                    type="button">
                <i class="fa-solid fa-list mr-2"></i> Purchase Voucher List
            </button>
        </nav>
    </div>
    <div id="content-form" class="tab-content">
        @using (Html.BeginForm("Create", "PurchaseVoucher", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.StockMaster.Id, new { id = "stockMasterId" })
            <div class="shadow-lg rounded-2xl bg-gradient-to-r from-blue-50 to-blue-100 p-6 border border-gray-200">
                <div class="flex justify-between items-center">
                    <div>
                        <h2 class="text-2xl font-bold text-blue-800 flex items-center gap-2">
                            <i class="fa-solid fa-boxes text-blue-900"></i> Purchase Voucher
                        </h2>
                        <p class="text-gray-600 mt-1 text-sm">Add and manage purchase voucher details</p>
                    </div>
                    <div class="space-x-2">
                        <button type="submit" onclick="beforeSave()"
                                class="px-5 py-2.5 rounded-xl text-sm font-semibold text-white bg-green-600 hover:bg-green-700 shadow-md transition">
                            <i class="fa-solid fa-save mr-2"></i> Save
                        </button>
                        <button type="reset"
                                class="px-5 py-2.5 rounded-xl text-sm font-semibold text-gray-700 bg-yellow-300 hover:bg-yellow-400 shadow-md transition"
                                onclick="resetForm()">
                            <i class="fa-solid fa-rotate-right mr-2"></i> Reset
                        </button>
                        <button type="button" onclick="refreshPage('form')"
                                class="px-5 py-2.5 rounded-xl text-sm font-semibold text-white bg-purple-500 hover:bg-purple-600 shadow-md transition">
                            <i class="fa-solid fa-arrows-rotate mr-2"></i> Refresh
                        </button>
                    </div>
                </div>
            </div>
            <div class="shadow-md rounded-2xl bg-white p-6 border border-gray-200 mt-4">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    @Html.HiddenFor(m => m.StockMaster.companyId)
                    @Html.HiddenFor(m => m.StockMaster.userId)
                    <input type="hidden" name="StockMaster.etype" value="Purchase" />
                    <div>
                        <label class="block font-semibold text-gray-700 mb-1">Current Date <sup class="text-red-800 text-lg">*</sup></label>
                        @Html.TextBoxFor(m => m.StockMaster.current_date, "{0:yyyy-MM-dd}",
                                 new { @class = "w-full p-2 border rounded-lg", type = "date", required = "required" })
                    </div>
                    <div>
                        <label class="block font-semibold text-gray-700 mb-1">Due Date <sup class="text-red-800 text-lg">*</sup></label>
                        @Html.TextBoxFor(m => m.StockMaster.due_date, "{0:yyyy-MM-dd}",
                                 new { @class = "w-full p-2 border rounded-lg", type = "date", required = "required" })
                    </div>
                    <div>
                        <label class="block font-semibold text-gray-700 mb-1">Posted Date <sup class="text-red-800 text-lg">*</sup></label>
                        @Html.TextBoxFor(m => m.StockMaster.posted_date, "{0:yyyy-MM-dd}",
                                 new { @class = "w-full p-2 border rounded-lg", type = "date", required = "required" })
                    </div>
                    <div>
                        <label class="block font-semibold text-gray-700 mb-1">Vender <sup class="text-red-800 text-lg">*</sup></label>
                        <select id="venderId" name="StockMaster.venderId" class="w-full p-2 border rounded-lg" required>
                            <option value="">Select Vender</option>
                            @foreach (var vender in ViewBag.Venders)
                            {
                                <option value="@vender.Id" selected="@(Model.StockMaster.venderId == vender.Id ? "selected" : null)">@vender.name</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label class="block font-semibold text-gray-700 mb-1">Transporter <sup class="text-red-800 text-lg">*</sup></label>
                        <select id="transporterId" name="StockMaster.transporterId" class="w-full p-2 border rounded-lg" required>
                            <option value="">Select Transporter</option>
                            @foreach (var transporter in ViewBag.Transporters)
                            {
                                <option value="@transporter.Id" selected="@(Model.StockMaster.transporterId == transporter.Id ? "selected" : null)">@transporter.transporter_no</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label class="block font-semibold text-gray-700 mb-1">Total Amount</label>
                        @Html.TextBoxFor(m => m.StockMaster.total_amount, new { @class = "w-full p-2 border rounded-lg", type = "number", step = "0.01", required = "required", @readonly = "readonly" })
                    </div>
                    <div>
                        <label class="block font-semibold text-gray-700 mb-1">Discount Amount</label>
                        @Html.TextBoxFor(m => m.StockMaster.discount_amount, new { @class = "w-full p-2 border rounded-lg", type = "number", step = "0.01", @onchange = "updateNetAmount()" })
                    </div>
                    <div>
                        <label class="block font-semibold text-gray-700 mb-1">Tax Amount</label>
                        @Html.TextBoxFor(m => m.StockMaster.tax_amount, new { @class = "w-full p-2 border rounded-lg", type = "number", step = "0.01", @onchange = "updateNetAmount()" })
                    </div>
                    <div>
                        <label class="block font-semibold text-gray-700 mb-1">Net Amount</label>
                        @Html.TextBoxFor(m => m.StockMaster.net_amount, new { @class = "w-full p-2 border rounded-lg", type = "number", step = "0.01", required = "required", @readonly = "readonly" })
                    </div>
                </div>
                <div class="grid grid-cols-1 gap-6 mt-3">
                    <div>
                        <label class="block font-semibold text-gray-700 mb-1">Remarks</label>
                        @Html.TextAreaFor(m => m.StockMaster.remarks,
                                 new { @class = "w-full p-2 border rounded-lg", rows = "2", placeholder = "Enter Remarks" })
                    </div>
                </div>
            </div>
            <!-- Stock Details -->
            <div class="shadow-md rounded-2xl bg-white p-6 border mt-4">
                <h3 class="text-lg font-semibold mb-4">Add Stock Details</h3>
                <div class="grid grid-cols-12 gap-6 items-end">
                    <div class="col-span-4">
                        <label>Warehouse <sup class="text-red-800 text-lg">*</sup></label>
                        <select id="warehouseId" class="w-full p-2 border rounded-lg" >
                            <option value="">Select Warehouse</option>
                            @foreach (var warehouse in ViewBag.Warehouses)
                            {
                                <option value="@warehouse.Id">@warehouse.warehouse_name</option>
                            }
                        </select>
                    </div>
                    <div class="col-span-4">
                        <label>Item <sup class="text-red-800 text-lg">*</sup></label>
                        <select id="itemId" class="w-full p-2 border rounded-lg">
                            <option value="">Select Item</option>
                            @foreach (var item in ViewBag.Items)
                            {
                                <option value="@item.Id">@item.item_name</option>
                            }
                        </select>
                    </div>
                    <div class="col-span-2">
                        <label>Rate <sup class="text-red-800 text-lg">*</sup></label>
                        <input type="number" id="rate" class="w-full p-2 border rounded-lg" step="0.01" min="0" />
                    </div>
                    <div class="col-span-2">
                        <label>Quantity <sup class="text-red-800 text-lg">*</sup></label>
                        <input type="number" id="qty" class="w-full p-2 border rounded-lg" min="1" />
                    </div>
                  
                    <div class="col-span-2">
                        <label>Amount <sup class="text-red-800 text-lg">*</sup></label>
                        <input type="number" id="amount" class="w-full p-2 border rounded-lg" step="0.01" min="0" />
                    </div>
                    <div class="col-span-3">
                        <label>Discount Percentage</label>
                        <input type="number" id="discount_percentage" class="w-full p-2 border rounded-lg" step="0.01" min="0" />
                    </div>
                    <div class="col-span-2">
                        <label>Discount Amount</label>
                        <input type="number" id="discount_amount" readonly class="w-full p-2 border rounded-lg" step="0.01" min="0" />
                    </div>
                    <div class="col-span-3">
                        <label>Net Amount</label>
                        <input type="number" id="net_amount" readonly class="w-full p-2 border rounded-lg" step="0.01" min="0" />
                    </div>
                    <div class="col-span-2">
                        <button type="button" id="btnAddDetail"
                                class="px-5 py-2 rounded-xl text-sm font-semibold text-white bg-blue-900">
                            Add
                        </button>
                    </div>
                </div>
            </div>
            <!-- Hidden container for posting StockDetail -->
            <div id="detailsContainer"></div>
            <div class="overflow-hidden border rounded-lg mt-6">
                <div class="max-h-96 overflow-y-auto">
                    <table class="table-auto w-full text-sm" id="detailsTable">
                        <thead class="bg-gradient-to-r from-blue-800 to-blue-900 text-white">
                            <tr>
                                <th class="p-3">S.No</th>
                                <th class="p-3">Date</th>
                                <th class="p-3">Warehouse</th>
                                <th class="p-3">Item</th>
                                <th class="p-3">Quantity</th>
                                <th class="p-3">Rate</th>
                                <th class="p-3">Amount</th>
                                <th class="p-3">Dis Per</th>
                                <th class="p-3">Dis Amt</th>
                                <th class="p-3">Net Amt</th>
                                <th class="p-3">Action</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        }
    </div>
    <div id="content-list" class="tab-content hidden shadow-lg rounded-2xl bg-white p-6 border">
        <div class="flex justify-between items-center">
            <div>
                <h2 class="text-2xl font-bold text-blue-900">
                    <i class="fa-solid fa-list-ul"></i> Purchase Voucher List
                </h2>
            </div>
            <div class="flex items-center space-x-4">
                <div class="px-5 py-2 rounded-xl text-sm font-semibold text-white bg-blue-900 shadow-md">
                    Total Items: 
                </div>
                <button type="button" id="btn-add-new"
                        class="px-5 py-2 rounded-xl text-sm font-semibold text-white bg-green-600 hover:bg-green-700">
                    <i class="fa-solid fa-plus"></i> Add New
                </button>
                <button type="button" onclick="refreshPage('list')"
                        class="px-5 py-2 rounded-xl text-sm font-semibold text-white bg-purple-500 hover:bg-purple-600">
                    <i class="fa-solid fa-arrows-rotate mr-2"></i> Refresh
                </button>
            </div>
        </div>
        <div class="overflow-hidden border rounded-lg mt-6">
            <div class="max-h-96 overflow-y-auto">
                <table class="table-auto w-full text-sm">
                    <thead class="bg-gradient-to-r from-blue-800 to-blue-900 text-white">
                        <tr>
                            <th class="p-3">ID</th>
                            <th class="p-3">Date</th>
                            <th class="p-3">Type</th>
                            <th class="p-3">Remarks</th>
                            <th class="p-3">Total Amount</th>
                            <th class="p-3">Net Amount</th>
                            <th class="p-3">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (stockList != null && stockList.Any())
                        {
                            foreach (var item in stockList)
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="p-3">@item.Id</td>
                                    <td class="p-3">@item.current_date</td>
                                    <td class="p-3">@item.etype</td>
                                    <td class="p-3">@item.remarks</td>
                                    <td class="p-3 text-blue-700">@item.total_amount.ToString("F2")</td>
                                    <td class="p-3 text-green-700">@item.net_amount.ToString("F2")</td>
                                    <td class="p-3 space-x-2">
                                        <a asp-action="PurchaseVoucher" asp-route-id="@item.Id"
                                           class="px-3 py-1.5 rounded-lg text-xs font-medium bg-blue-100 text-blue-700 hover:bg-blue-200 transition">
                                            <i class="fa-solid fa-pen"></i> Edit
                                        </a>
                                        @using (Html.BeginForm("Delete", "Purchase", FormMethod.Post,
                                       new { onsubmit = "return confirm('Are you sure?');", @class = "inline" }))
                                        {
                                            @Html.AntiForgeryToken()
                                            @Html.Hidden("id", item.Id)
                                            <button type="submit"
                                                    class="px-3 py-1 rounded bg-red-100 text-red-700">
                                                Delete
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center p-4 text-gray-500">No Purchase Vouchers found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
     
    </div>
</div>
<script>
    const tabForm = document.getElementById("tab-form");
    const tabList = document.getElementById("tab-list");
    const contentForm = document.getElementById("content-form");
    const contentList = document.getElementById("content-list");
    const btnAddNew = document.getElementById("btn-add-new");
    tabForm.addEventListener("click", showFormTab);
    tabList.addEventListener("click", showListTab);
    if (btnAddNew) btnAddNew.addEventListener("click", addNew);

    function showFormTab() {
        tabForm.classList.add("text-blue-900", "border-blue-900");
        tabList.classList.remove("text-blue-900", "border-blue-900");
        contentForm.classList.remove("hidden");
        contentList.classList.add("hidden");
    }

    function showListTab() {
        tabList.classList.add("text-blue-900", "border-blue-900");
        tabForm.classList.remove("text-blue-900", "border-blue-900");
        contentList.classList.remove("hidden");
        contentForm.classList.add("hidden");
    }

    function addNew() {
        resetForm();
        document.getElementById("stockMasterId").value = "0";
        showFormTab();
    }

    function resetForm() {
        document.querySelector("form").reset();
        details = [];
        renderTable();
        clearInputs();
        updateNetAmount();
    }

    function refreshPage(tab) {
        window.location.href = '@Url.Action("PurchaseVoucher", "Purchase", new { page = ViewBag.Page, pageSize = ViewBag.PageSize })' + '&activeTab=' + tab;
    }

    // ===================== AUTO CALCULATION SECTION ===================== //

    const qtyInput = document.getElementById("qty");
    const rateInput = document.getElementById("rate");
    const amountInput = document.getElementById("amount");
    const discountPerInput = document.getElementById("discount_percentage");
    const discountAmtInput = document.getElementById("discount_amount");
    const netAmtInput = document.getElementById("net_amount");

    qtyInput.addEventListener("input", calculateAmounts);
    rateInput.addEventListener("input", calculateAmounts);
    discountPerInput.addEventListener("input", calculateDiscount);

    function calculateAmounts() {
        const qty = parseFloat(qtyInput.value) || 0;
        const rate = parseFloat(rateInput.value) || 0;
        const amount = qty * rate;
        amountInput.value = amount.toFixed(2);

        // Reset discount fields when qty or rate changes
        discountPerInput.value = "";
        discountAmtInput.value = "";
        netAmtInput.value = amount.toFixed(2);
    }

    function calculateDiscount() {
        const amount = parseFloat(amountInput.value) || 0;
        const discountPer = parseFloat(discountPerInput.value) || 0;
        const discountAmt = (amount * discountPer) / 100;
        const netAmt = amount - discountAmt;

        discountAmtInput.value = discountAmt.toFixed(2);
        netAmtInput.value = netAmt.toFixed(2);
    }

    // ===================== ADDING DETAILS SECTION ===================== //

    let details = [];

    document.getElementById("btnAddDetail").addEventListener("click", function () {
        const warehouseId = document.getElementById("warehouseId").value;
        const warehouseName = document.getElementById("warehouseId").selectedOptions[0]?.text;
        const itemId = document.getElementById("itemId").value;
        const itemName = document.getElementById("itemId").selectedOptions[0]?.text;
        const qty = parseFloat(qtyInput.value) || 0;
        const rate = parseFloat(rateInput.value) || 0;
        const amount = parseFloat(amountInput.value) || 0;
        const discount_percentage = parseFloat(discountPerInput.value) || 0;
        const discount_amount = parseFloat(discountAmtInput.value) || 0;
        const net_amount = parseFloat(netAmtInput.value) || 0;
        const currentDate = document.querySelector('input[name="StockMaster.current_date"]').value;

        if (!warehouseId) return alert("Select Warehouse");
        if (!itemId) return alert("Select Item");
        if (qty <= 0) return alert("Enter valid Quantity");
        if (rate <= 0) return alert("Enter valid Rate");

        const detail = { warehouseId, warehouseName, itemId, itemName, qty, rate, amount, discount_percentage, discount_amount, net_amount, current_date: currentDate };
        details.push(detail);

        renderTable();
        clearInputs();
        updateNetAmount();
    });

    function renderTable() {
        const tbody = document.querySelector("#detailsTable tbody");
        const container = document.getElementById("detailsContainer");
        tbody.innerHTML = "";
        container.innerHTML = "";

        let totalAmount = 0;
        let totalDiscount = 0;
        let totalNet = 0;

        details.forEach((d, i) => {
            totalAmount += d.amount;
            totalDiscount += d.discount_amount;
            totalNet += d.net_amount;

            tbody.innerHTML += `
                    <tr>
                        <td class="p-3">${i + 1}</td>
                        <td class="p-3">${d.current_date}</td>
                        <td class="p-3">${d.warehouseName}</td>
                        <td class="p-3">${d.itemName}</td>
                        <td class="p-3">${d.qty}</td>
                        <td class="p-3">${d.rate.toFixed(2)}</td>
                        <td class="p-3">${d.amount.toFixed(2)}</td>
                        <td class="p-3">${d.discount_percentage.toFixed(2)}</td>
                        <td class="p-3">${d.discount_amount.toFixed(2)}</td>
                        <td class="p-3">${d.net_amount.toFixed(2)}</td>
                        <td class="p-3">
                            <button type="button" onclick="removeDetail(${i})" class="text-red-600">Delete</button>
                        </td>
                    </tr>`;

            container.innerHTML += `
                    <input type="hidden" name="StockDetail[${i}].warehouseId" value="${d.warehouseId}" />
                    <input type="hidden" name="StockDetail[${i}].itemId" value="${d.itemId}" />
                    <input type="hidden" name="StockDetail[${i}].qty" value="${d.qty}" />
                    <input type="hidden" name="StockDetail[${i}].rate" value="${d.rate}" />
                    <input type="hidden" name="StockDetail[${i}].amount" value="${d.amount}" />
                    <input type="hidden" name="StockDetail[${i}].discount_percentage" value="${d.discount_percentage}" />
                    <input type="hidden" name="StockDetail[${i}].discount_amount" value="${d.discount_amount}" />
                    <input type="hidden" name="StockDetail[${i}].net_amount" value="${d.net_amount}" />
                    <input type="hidden" name="StockDetail[${i}].current_date" value="${d.current_date}" />
                `;
        });

        if (details.length > 0) {
            tbody.innerHTML += `
                    <tr class="bg-gray-100 font-semibold">
                        <td colspan="6" class="p-3">Total</td>
                        <td class="p-3 text-blue-700">${totalAmount.toFixed(2)}</td>
                        <td class="p-3 text-blue-700"></td>
                        <td class="p-3 text-blue-700">${totalDiscount.toFixed(2)}</td>
                        <td class="p-3 text-green-700">${totalNet.toFixed(2)}</td>
                        <td></td>
                    </tr>`;
        }

        document.querySelector('input[name="StockMaster.total_amount"]').value = totalAmount.toFixed(2);
        updateNetAmount();
    }

    function removeDetail(index) {
        details.splice(index, 1);
        renderTable();
    }

    function clearInputs() {
        document.getElementById("warehouseId").value = "";
        document.getElementById("itemId").value = "";
        qtyInput.value = "";
        rateInput.value = "";
        amountInput.value = "";
        discountPerInput.value = "";
        discountAmtInput.value = "";
        netAmtInput.value = "";
    }

    function updateNetAmount() {
        const totalAmount = parseFloat(document.querySelector('input[name="StockMaster.total_amount"]').value) || 0;
        const discount = parseFloat(document.querySelector('input[name="StockMaster.discount_amount"]').value) || 0;
        const tax = parseFloat(document.querySelector('input[name="StockMaster.tax_amount"]').value) || 0;
        document.querySelector('input[name="StockMaster.net_amount"]').value = (totalAmount - discount + tax).toFixed(2);
    }

    function beforeSave() {
        updateNetAmount();
    }

    // Load previous data (edit mode)
    @if (Model.StockMaster.Id > 0 && Model.StockDetail != null && Model.StockDetail.Any())
    {
        var detailsJson = JsonSerializer.Serialize(Model.StockDetail.Select(d => new
        {
            warehouseId = d.warehouseId,
            itemId = d.itemId,
            qty = d.qty,
            rate = d.rate,
            amount = d.amount,
            discount_percentage = d.discount_percentage,
            discount_amount = d.discount_amount,
            net_amount = d.net_amount,
            current_date = d.current_date.ToString("yyyy-MM-dd")
        }));
        <text>
            details = @Html.Raw(detailsJson);
        renderTable();
        </text>
    }

    @if (ViewBag.ActiveTab == "list")
    {
        <text>showListTab(); </text>
    }
    else
    {
        <text>showFormTab(); </text>
    }
</script>
