@model ERP.Models.JournalViewModel
@using System.Text.Json
@{
    ViewData["Title"] = "Account Payable Voucher";
    int totalJournal = ViewBag.TotalItems; // Use TotalItems to match controller
    int page = ViewBag.Page;
    int pageSize = ViewBag.PageSize;
    var JournalList = ViewBag.Journal as List<ERP.Models.JournalViewModel>;
    int totalPages = (int)Math.Ceiling((double)totalJournal / pageSize);
}
<div class="space-y-8">
    <div class="border-b border-gray-300 bg-white shadow-sm rounded-xl p-2">
        <nav class="flex space-x-6" aria-label="Tabs">
            <button id="tab-form"
                    class="px-4 py-2 text-sm font-semibold text-blue-900 border-b-2 border-blue-900"
                    type="button">
                <i class="fa-solid fa-plus-circle mr-2"></i> Account Payable Entry
            </button>
            <button id="tab-list"
                    class="px-4 py-2 text-sm font-semibold text-gray-500 hover:text-blue-900"
                    type="button">
                <i class="fa-solid fa-list mr-2"></i> Account Payable List
            </button>
        </nav>
    </div>

    <div id="content-form" class="tab-content">
        @using (Html.BeginForm("Create", "AccountPayable", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(j => j.JournalEntry.Id, new { id = "journalId" })
            <div class="shadow-lg rounded-2xl bg-gradient-to-r from-blue-50 to-blue-100 p-6 border border-gray-200">
                <div class="flex justify-between items-center">
                    <div>
                        <h2 class="text-2xl font-bold text-blue-800 flex items-center gap-2">
                            <i class="fa-solid fas fa-boxes text-blue-900"></i> Account Payable Voucher
                        </h2>
                        <p class="text-gray-600 mt-1 text-sm">Add and manage Account Payable voucher details</p>
                    </div>
                    <div class="space-x-2">
                        <button type="submit" onclick="beforeSave()"
                                class="px-5 py-2.5 rounded-xl text-sm font-semibold text-white bg-green-600 hover:bg-green-700 shadow-md transition">
                            <i class="fa-solid fa-save mr-2"></i> Save
                        </button>
                        <button type="reset"
                                class="px-5 py-2.5 rounded-xl text-sm font-semibold text-gray-700 bg-yellow-300 hover:bg-yellow-400 shadow-md transition"
                                onclick="resetForm()">
                            <i class="fa-solid fa-rotate-right mr-2"></i> Reset
                        </button>
                        <button type="button" onclick="refreshPage('form')"
                                class="px-5 py-2.5 rounded-xl text-sm font-semibold text-white bg-purple-500 hover:bg-purple-600 shadow-md transition">
                            <i class="fa-solid fa-arrows-rotate mr-2"></i> Refresh
                        </button>
                    </div>
                </div>
            </div>
            <div class="shadow-md rounded-2xl bg-white p-6 border border-gray-200 mt-4">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    @Html.HiddenFor(j => j.JournalEntry.companyId)
                    @Html.HiddenFor(j => j.JournalEntry.userId)
                    <input type="hidden" name="JournalEntry.etype" value="AccountPayable" />

                    <div>
                        <label class="block font-semibold text-gray-700 mb-1">Current Date *</label>
                        @Html.TextBoxFor(j => j.JournalEntry.current_date, "{0:yyyy-MM-dd}",
                                 new { @class = "w-full p-2 border rounded-lg", type = "date", required = "required" })
                    </div>
                    <div>
                        <label class="block font-semibold text-gray-700 mb-1">Due Date *</label>
                        @Html.TextBoxFor(j => j.JournalEntry.due_date, "{0:yyyy-MM-dd}",
                                 new { @class = "w-full p-2 border rounded-lg", type = "date", required = "required" })
                    </div>
                    <div>
                        <label class="block font-semibold text-gray-700 mb-1">Posted Date *</label>
                        @Html.TextBoxFor(j => j.JournalEntry.posted_date, "{0:yyyy-MM-dd}",
                                 new { @class = "w-full p-2 border rounded-lg", type = "date", required = "required" })
                    </div>
                </div>
                <div class="grid grid-cols-1 gap-6 mt-3">

                    <div class="col-span-2">
                        <label class="block font-semibold text-gray-700 mb-1">Description</label>
                        @Html.TextAreaFor(j => j.JournalEntry.description,
                                 new { @class = "w-full p-2 border rounded-lg", rows = "2", placeholder = "Enter Description" })
                    </div>
                </div>
            </div>

            <!-- Journal Details -->
            <div class="shadow-md rounded-2xl bg-white p-6 border mt-4">
                <h3 class="text-lg font-semibold mb-4">Add Journal Details</h3>
                <div class="grid grid-cols-12 gap-6 items-end">
                    <div class="col-span-3">
                        <label>Chart Of Account *</label>
                        <select id="chartOfAccount" class="w-full p-2 border rounded-lg">
                            <option value="">Select</option>
                            @foreach (var account in ViewBag.ChartOfAccount)
                            {
                                <option value="@account.Id">@account.name</option>
                            }
                        </select>
                    </div>
                    <div class="col-span-4">
                        <label>Description *</label>
                        <textarea id="description" class="w-full p-2 border rounded-lg" rows="3"></textarea>
                    </div>
                    <div class="col-span-2">
                        <label>Credit *</label>
                        <input type="number" id="credit" class="w-full p-2 border rounded-lg" step="0.01" />
                    </div>
                    <div class="col-span-2">
                        <label>Debit *</label>
                        <input type="number" id="debit" class="w-full p-2 border rounded-lg" step="0.01" />
                    </div>
                    <div class="col-span-1">
                        <button type="button" id="btnAddDetail"
                                class="px-5 py-2 rounded-xl text-sm font-semibold text-white bg-blue-900">
                            Add
                        </button>
                    </div>
                </div>
            </div>

            <!-- Hidden container for posting JournalDetail -->
            <div id="detailsContainer"></div>

            <div class="overflow-hidden border rounded-lg mt-6">
                <div class="max-h-96 overflow-y-auto">
                    <table class="table-auto w-full text-sm" id="detailsTable">
                        <thead class="bg-gradient-to-r from-blue-800 to-blue-900 text-white">
                            <tr>
                                <th class="p-3">S.No</th>
                                <th class="p-3">Date</th>
                                <th class="p-3">Chart of Account</th>
                                <th class="p-3">Description</th>
                                <th class="p-3">Credit</th>
                                <th class="p-3">Debit</th>
                                <th class="p-3">Action</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        }
    </div>
    <div id="content-list" class="tab-content hidden shadow-lg rounded-2xl bg-white p-6 border">
        <div class="flex justify-between items-center">
            <div>
                <h2 class="text-2xl font-bold text-blue-900">
                    <i class="fa-solid fa-list-ul"></i> Account Payable List
                </h2>
            </div>
            <div class="flex items-center space-x-4">
                <div class="px-5 py-2 rounded-xl text-sm font-semibold text-white bg-blue-900 shadow-md">
                    Total Items: @totalJournal
                </div>
                <button type="button" id="btn-add-new"
                        class="px-5 py-2 rounded-xl text-sm font-semibold text-white bg-green-600 hover:bg-green-700">
                    <i class="fa-solid fa-plus"></i> Add New
                </button>
                <button type="button" onclick="refreshPage('list')"
                        class="px-5 py-2 rounded-xl text-sm font-semibold text-white bg-purple-500 hover:bg-purple-600">
                    <i class="fa-solid fa-arrows-rotate mr-2"></i> Refresh
                </button>
            </div>
        </div>

        <div class="overflow-hidden border rounded-lg mt-6">
            <div class="max-h-96 overflow-y-auto">
                <table class="table-auto w-full text-sm">
                    <thead class="bg-gradient-to-r from-blue-800 to-blue-900 text-white">
                        <tr>
                            <th class="p-3">ID</th>
                            <th class="p-3">Date</th>
                            <th class="p-3">etype</th>
                            <th class="p-3">Description</th>
                            <th class="p-3">Total Debit</th>
                            <th class="p-3">Total Credit</th>
                            <th class="p-3">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (JournalList != null && JournalList.Any())
                        {
                            foreach (var item in JournalList)
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="p-3">@item.JournalEntry.Id</td>
                                    <td class="p-3">@item.JournalEntry.current_date</td>
                                    <td class="p-3">@item.JournalEntry.etype</td>
                                    <td class="p-3">@item.JournalEntry.description</td>
                                    <td class="p-3 text-blue-700">@item.JournalEntry.total_debit</td>
                                    <td class="p-3 text-green-700">@item.JournalEntry.total_credit</td>
                                    <td class="p-3 space-x-2">
                                        <a asp-action="Edit" asp-route-id="@item.JournalEntry.Id"
                                           class="px-3 py-1.5 rounded-lg text-xs font-medium bg-blue-100 text-blue-700 hover:bg-blue-200 transition">
                                            <i class="fa-solid fa-pen"></i> Edit
                                        </a>
                                        @using (Html.BeginForm("Delete", "AccountPayable", FormMethod.Post,
                                       new { onsubmit = "return confirm('Are you sure?');", @class = "inline" }))
                                        {
                                            @Html.AntiForgeryToken()
                                            @Html.Hidden("id", item.JournalEntry.Id)
                                            <button type="submit"
                                                    class="px-3 py-1 rounded bg-red-100 text-red-700">
                                                Delete
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center p-4 text-gray-500">No Account Payable found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="flex justify-between items-center mt-4">
            <span class="text-sm text-gray-600">
                Showing @(Math.Min((page - 1) * pageSize + 1, totalJournal)) to @(Math.Min(page * pageSize, totalJournal)) of @totalJournal entries
            </span>
            <div class="space-x-2">
                @if (page > 1)
                {
                    <a asp-action="AccountPayable" asp-route-page="@(page-1)" asp-route-pageSize="@pageSize" asp-route-activeTab="list"
                       class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300">Prev</a>
                }
                @for (int i = 1; i <= totalPages; i++)
                {
                    <a asp-action="AccountPayable" asp-route-page="@i" asp-route-pageSize="@pageSize" asp-route-activeTab="list"
                       class="px-3 py-1 rounded @(page == i ? "bg-blue-900 text-white" : "bg-gray-200 text-gray-700")">
                        @i
                    </a>
                }
                @if (page < totalPages)
                {
                    <a asp-action="AccountPayable" asp-route-page="@(page+1)" asp-route-pageSize="@pageSize" asp-route-activeTab="list"
                       class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300">Next</a>
                }
            </div>
        </div>
    </div>
</div>

<script>
    const tabForm = document.getElementById("tab-form");
    const tabList = document.getElementById("tab-list");
    const contentForm = document.getElementById("content-form");
    const contentList = document.getElementById("content-list");
    const btnAddNew = document.getElementById("btn-add-new");

    tabForm.addEventListener("click", showFormTab);
    tabList.addEventListener("click", showListTab);
    if (btnAddNew) btnAddNew.addEventListener("click", addNew);

    function showFormTab() {
        tabForm.classList.add("text-blue-900", "border-blue-900");
        tabList.classList.remove("text-blue-900", "border-blue-900");
        contentForm.classList.remove("hidden");
        contentList.classList.add("hidden");
    }

    function showListTab() {
        tabList.classList.add("text-blue-900", "border-blue-900");
        tabForm.classList.remove("text-blue-900", "border-blue-900");
        contentList.classList.remove("hidden");
        contentForm.classList.add("hidden");
    }

    function addNew() {
        // Clear form and details
        resetForm();
        document.getElementById("journalId").value = "0";
        showFormTab();
    }

    function resetForm() {
        document.querySelector("form").reset();
        details = [];
        renderTable();
        clearInputs();
    }

    function refreshPage(tab) {
        window.location.href = '@Url.Action("AccountPayable", "AccountPayable", new { page = ViewBag.Page, pageSize = ViewBag.PageSize })' + '&activeTab=' + tab;
    }

    let details = [];

    document.getElementById("btnAddDetail").addEventListener("click", function () {
        const chartOfAccountId = document.getElementById("chartOfAccount").value;
        const chartOfAccountName = document.getElementById("chartOfAccount").selectedOptions[0]?.text;
        const description = document.getElementById("description").value;
        const credit = parseFloat(document.getElementById("credit").value) || 0;
        const debit = parseFloat(document.getElementById("debit").value) || 0;
        const currentDate = document.querySelector('input[name="JournalEntry.current_date"]').value;

        if (!chartOfAccountId) return alert("Select Chart of Account");
        if (credit === 0 && debit === 0) return alert("Enter either Credit or Debit");
        if (credit > 0 && debit > 0) return alert("Enter only Credit OR Debit");

        const detail = { chartOfAccountId, chartOfAccountName, description, credit_amount: credit, debit_amount: debit, current_date: currentDate };
        details.push(detail);
        renderTable();
        clearInputs();
    });

    function renderTable() {
        const tbody = document.querySelector("#detailsTable tbody");
        const container = document.getElementById("detailsContainer");
        tbody.innerHTML = "";
        container.innerHTML = "";
        let totalCredit = 0, totalDebit = 0;

        details.forEach((d, i) => {
            totalCredit += d.credit_amount;
            totalDebit += d.debit_amount;

            tbody.innerHTML += `
                    <tr>
                        <td class="p-3">${i + 1}</td>
                        <td class="p-3">${d.current_date}</td>
                        <td class="p-3">${d.chartOfAccountName}</td>
                        <td class="p-3">${d.description}</td>
                        <td class="p-3">${d.credit_amount.toFixed(2)}</td>
                        <td class="p-3">${d.debit_amount.toFixed(2)}</td>
                        <td class="p-3">
                            <button type="button" onclick="removeDetail(${i})" class="text-red-600">Delete</button>
                        </td>
                    </tr>`;

            container.innerHTML += `
                    <input type="hidden" name="JournalDetail[${i}].chartOfAccountId" value="${d.chartOfAccountId}" />
                    <input type="hidden" name="JournalDetail[${i}].description" value="${d.description}" />
                    <input type="hidden" name="JournalDetail[${i}].credit_amount" value="${d.credit_amount}" />
                    <input type="hidden" name="JournalDetail[${i}].debit_amount" value="${d.debit_amount}" />
                    <input type="hidden" name="JournalDetail[${i}].current_date" value="${d.current_date}" />
                `;
        });

        if (details.length > 0) {
            tbody.innerHTML += `
                    <tr class="bg-gray-100 font-semibold">
                        <td colspan="4" class="p-3">Total</td>
                        <td class="p-3 text-green-700">${totalCredit.toFixed(2)}</td>
                        <td class="p-3 text-blue-700">${totalDebit.toFixed(2)}</td>
                        <td></td>
                    </tr>`;
        }
    }

    function removeDetail(index) {
        details.splice(index, 1);
        renderTable();
    }

    function clearInputs() {
        document.getElementById("chartOfAccount").value = "";
        document.getElementById("credit").value = "";
        document.getElementById("description").value = "";
        document.getElementById("debit").value = "";
    }

    @if (Model.JournalEntry.Id > 0)
    {
        var detailsJson = JsonSerializer.Serialize(Model.JournalDetail.Select(d => new
        {
            chartOfAccountId = d.chartOfAccountId,
            chartOfAccountName = d.ChartOfAccount?.name ?? "",
            description = d.description,
            credit_amount = d.credit_amount,
            debit_amount = d.debit_amount,
            current_date = d.current_date.ToString()
        }));
        <text>
            details = @Html.Raw(detailsJson);
        renderTable();
        </text>
    }

        // Set initial tab based on activeTab query parameter
    @if (ViewBag.ActiveTab == "list")
    {
        <text>showListTab(); </text>
    }
    else
    {
        <text>showFormTab(); </text>
    }
</script>